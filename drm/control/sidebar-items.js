initSidebarItems({"enum":[["Event","An event from a device."],["PageFlipTarget","Target to alter the sequence of page flips"],["PlaneType","Type of a plane"]],"fn":[["from_u32","Convert from a raw drm object value to a typed Handle"]],"mod":[["atomic","Helpers for atomic modesetting."],["connector","Connector"],["crtc","CRTC"],["dumbbuffer","DumbBuffer"],["encoder","Encoder"],["framebuffer","Framebuffer"],["plane","Plane"],["property","Property"]],"struct":[["AtomicCommitFlags","Commit flags for atomic mode setting"],["CrtcListFilter","A filter that can be used with a [`ResourceHandles`] to determine the set of Crtcs that can attach to a specific encoder."],["Events","Iterator over [`Event`]s of a device. Create via [`Device::receive_events()`]."],["Mode","Resolution and timing information for a display mode."],["ModeFlags","Display mode flags"],["ModePropFlags","Mode property flags"],["ModeTypeFlags","Display mode type flags"],["PageFlipEvent","Page Flip event"],["PageFlipFlags","Flags to alter the behaviour of a page flip"],["PlaneResourceHandles","The set of [`plane::Handle`] that a [`Device`] exposes."],["PropertyValueSet","Wrapper around a set of property IDs and their raw values."],["ResourceHandles","The set of [`ResourceHandles`] that a [`Device`] exposes. Excluding Plane resources."],["VblankEvent","Vblank event"]],"trait":[["Device","This trait should be implemented by any object that acts as a DRM device and provides modesetting functionality."],["ResourceHandle","Handle for a drm resource"]],"type":[["RawResourceHandle","Raw handle for a drm resource"]]});